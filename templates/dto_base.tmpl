package dto

import (
	"time"
)

// {{.EntityName}}Create DTO for creating a new {{.EntityName}}
type {{.EntityName}}Create struct {
	{{- range .Fields}}
	{{- if not .Virtual}}
	{{toGoFieldName .FieldName}} *{{convertTypeScriptTypeToGo .FieldType}} `json:"{{.FieldName}},omitempty" binding:"{{formatValidationRules .}}"`
	{{- end}}
	{{- end}}
	{{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
	{{toGoFieldName .FieldName}}ID *{{relatedIDType .}} `json:"{{.FieldName}}ID,omitempty"`
	{{- end}}
	{{- end}}
}

type {{.EntityName}}BulkCreate struct {
  {{.EntityName}}s []*{{.EntityName}}Create `json:"{{camelCase .EntityNamePlural}}" binding:"required,min=1"`
}

// {{.EntityName}}Update DTO for updating an existing {{.EntityName}}
type {{.EntityName}}Update struct {
	{{- range .Fields}}
  {{- if and (not .Primary) (not .Virtual)}}
	{{toGoFieldName .FieldName}} *{{convertTypeScriptTypeToGo .FieldType}} `json:"{{.FieldName}},omitempty"`
  {{- end}}
	{{- end}}
	{{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
	{{toGoFieldName .FieldName}}ID *{{relatedIDType .}} `json:"{{.FieldName}}ID,omitempty"`
	{{- end}}
	{{- end}}
}

type {{.EntityName}}UpdateWithID struct {
	IDField
	{{.EntityName}}Update
}

type {{.EntityName}}BulkUpdate struct {
  {{.EntityName}}s []*{{.EntityName}}UpdateWithID `json:"{{camelCase .EntityNamePlural}}" binding:"required,min=1"`
}

// {{.EntityName}}Response DTO for responding with {{.EntityName}} data
type {{.EntityName}}Response struct {
	{{- range .Fields}}
	{{toGoFieldName .FieldName}} *{{convertTypeScriptTypeToGo .FieldType}} `json:"{{.FieldName}}"`
	{{- end}}
	{{- range .Relations}}
	{{formatRelationDTO .}}
	{{- end}}
  BaseModelResponse
}

type Paginated{{.EntityName}}Response struct {
	PaginationResponse
	Items []*{{.EntityName}}Response `json:"items"`
}

// {{.EntityName}}Query DTO for querying {{.EntityName}} data
type {{.EntityName}}Query struct {
  {{- range .Fields}}
  {{- if and .FilterBy (ne .FieldType "date") (not .Virtual) }}
  {{toGoFieldName .FieldName}} *{{convertTypeScriptTypeToGo .FieldType}} `form:"{{.FieldName}},omitempty" json:"{{.FieldName}},omitempty"`
  {{- end}}
  {{- if and .FilterBy (eq .FieldType "date") (not .Virtual) }}
    {{pascalCase .FieldName}}After *time.Time `form:"{{camelCase .FieldName}}After,omitempty" json:"{{camelCase .FieldName}}After,omitempty"`
    {{pascalCase .FieldName}}Before *time.Time `form:"{{camelCase .FieldName}}Before,omitempty" json:"{{camelCase .FieldName}}Before,omitempty"`
  {{- end}}
  {{- end}}
	{{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
	{{toGoFieldName .FieldName}}ID *{{relatedIDType .}} `form:"{{.FieldName}}ID,omitempty" json:"{{.FieldName}}ID,omitempty"`
	{{- end}}
	{{- end}}
}


type Full{{.EntityName}}Query struct {
  DateQuery
	PaginationQuery
  {{.EntityName}}Query
  {{.EntityName}}QueryExtraOptions
}
