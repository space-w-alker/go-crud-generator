package dto

import "time"

type IDField struct {
	ID *string `json:"ID,omitempty" binding:""`
}

type SignUpInput struct {
	Email       *string `json:"email" binding:"required_without=PhoneNumber,omitempty,email"`
	PhoneNumber *string `json:"phoneNumber" binding:"required_without=Email,omitempty"`
	Password    *string `json:"password" binding:"required,min=8"`
	FullName    *string `json:"fullName" binding:"required"`
	UserType    *string `json:"userType" binding:"omitempty"`
	Address     *string `json:"address" binding:"omitempty"`
	State       *string `json:"state" binding:"omitempty"`
	City        *string `json:"city" binding:"omitempty"`
}

type SignInInput struct {
	Email       *string `json:"email" binding:"required_without=PhoneNumber,omitempty,email"`
	PhoneNumber *string `json:"phoneNumber" binding:"required_without=Email,omitempty"`
	Password    *string `json:"password" binding:"required"`
}

type AuthResponse struct {
	AccessToken  *string `json:"accessToken"`
	RefreshToken *string `json:"refreshToken"`
}

type RefreshTokenInput struct {
	RefreshToken *string `json:"refreshToken" binding:"required"`
}

type GetByIDQuery struct {
	Preload []string `form:"preload[],omitempty" json:"preload[],omitempty"`
}

type PaginationQuery struct {
	Preload   []string `form:"preload[],omitempty" json:"preload[],omitempty"`
	Q         *string  `form:"q,omitempty" json:"q,omitempty"`
	Page      *int     `form:"page,omitempty" json:"page,omitempty"`
	Size      *int     `form:"size,omitempty" json:"size,omitempty"`
	SortBy    *string  `form:"sortBy,omitempty" json:"sortBy,omitempty"`
	SortOrder *string  `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

type PaginationResponse struct {
	PageSize       int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	TotalPages     int `form:"totalPages,omitempty" json:"totalPages,omitempty"`
	TotalItemCount int `form:"totalItemCount,omitempty" json:"totalItemCount,omitempty"`
}

type DateQuery struct {
	After  *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`
	Before *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`
}

type ErrorResponse struct {
	Error *string `form:"error,omitempty" json:"error,omitempty"`
}
