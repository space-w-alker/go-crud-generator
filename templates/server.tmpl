package {{.PackageName}}

import (
	"crypto/tls"
	"log"
	"net/http"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

const (
	CORSMaxAgeHours = 12
)

// Config holds server configuration parameters
type Config struct {
	Port            string
	Mode            string
	ShutdownTimeout time.Duration
	TLSCertFile     string // Path to TLS certificate file
	TLSKeyFile      string // Path to TLS key file
	EnableTLS       bool   // Whether to enable TLS
}

// NewServer creates a new Gin server with default middleware
func NewServer(config Config) *gin.Engine {
	// Set Gin mode
	gin.SetMode(config.Mode)

	// Create new Gin instance
	r := gin.New()

	// Add middleware
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	// Configure CORS
	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"}, // Adjust in production
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           CORSMaxAgeHours * time.Hour,
	}))

	return r
}

// StartServer starts the HTTP or HTTPS server based on configuration
func StartServer(r *gin.Engine, config Config) error {
	server := &http.Server{
		Addr:        ":" + config.Port,
		Handler:     r,
		ReadTimeout: time.Second,
	}

	if config.EnableTLS {
		// Configure TLS
		server.TLSConfig = &tls.Config{
			MinVersion: tls.VersionTLS12, // Enforce minimum TLS version
		}

		log.Printf("Server starting with TLS on port %s", config.Port)
		return server.ListenAndServeTLS(config.TLSCertFile, config.TLSKeyFile)
	}

	log.Printf("Server starting without TLS on port %s", config.Port)
	return server.ListenAndServe()
}
