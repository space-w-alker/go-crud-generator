//nolint:dupl // Disable dupl linter for this entire file
package repositories

import (
	"errors"
	"{{.ModuleName}}/errs"
	"{{.ModuleName}}/errs/errcodes"
	"{{.ModuleName}}/models"
	"{{.ModuleName}}/dto"
	"gorm.io/gorm"
)

// {{.EntityName}}Repository handles database operations for {{.EntityName}}
type {{.EntityName}}Repository struct {
	DB *gorm.DB
}

// New{{.EntityName}}Repository creates a new repository
func New{{.EntityName}}Repository(db *gorm.DB) *{{.EntityName}}Repository {
	return &{{.EntityName}}Repository{DB: db}
}

// Create adds a new {{.EntityName}} to the database
func (r *{{.EntityName}}Repository) Create(create *dto.{{.EntityName}}Create) (*models.{{.EntityName}}, error) {
	{{.EntityNameLower}} := &models.{{.EntityName}}{}
	{{$parent := .}}
	// Map DTO to model
	{{- range .Fields}}
	{{- if not .Primary}}
	{{$parent.EntityNameLower}}.{{toGoFieldName .FieldName}} = create.{{toGoFieldName .FieldName}}
	{{- end}}
	{{- end}}

  {{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
  if create.{{toGoFieldName .FieldName}}ID != nil {
	  {{$parent.EntityNameLower}}.{{toGoFieldName .FieldName}}ID = create.{{toGoFieldName .FieldName}}ID
  }
  {{- end}}
  {{- end}}
	
	// Save to database
	if err := r.DB.Create(&{{.EntityNameLower}}).Error; err != nil {
    return nil, errs.NewError(errcodes.CodeDBError, "Failed to create {{.EntityNameLower}}").Occurred()
	}
	
	return {{.EntityNameLower}}, nil
}

// GetAll retrieves all {{.EntityNamePlural}} with optional filtering
func (r *{{.EntityName}}Repository) GetAll(q *dto.Full{{.EntityName}}Query, scopes ...func(*gorm.DB) *gorm.DB) ([]models.{{.EntityName}}, int, int, error) {
	var {{.EntityNameLower}}s []models.{{.EntityName}}

	query := r.DB.Model(&models.{{.EntityName}}{})

	query.Where(&(q.{{.EntityName}}Query))

	p := NewPagination(*q.Page, *q.Size, *q.SortBy, *q.SortOrder)

	if err := p.Count(query, &models.{{.EntityName}}{}); err != nil {
    return nil, 0, 0, errs.NewError(errcodes.CodeDBError, "Failed to count total {{.EntityNameLower}} records").Occurred()
	}

  scopes = append(scopes, p.Paginate())

	if err := query.Scopes(scopes...).Find(&{{.EntityNameLower}}s).Error; err != nil {
		return nil, 0, 0, errs.NewError(errcodes.CodeDBError, "Failed to retrieve {{.EntityNameLower}} records").Occurred()
	}

	return {{.EntityNameLower}}s, p.TotalRows, p.TotalPages, nil
}

// GetByID retrieves a single {{.EntityName}} by ID
func (r *{{.EntityName}}Repository) GetByID(id {{.GetPrimaryKeyType}}) (*models.{{.EntityName}}, error) {
	var {{.EntityNameLower}} models.{{.EntityName}}
	
	if err := r.DB.First(&{{.EntityNameLower}}, "{{.GetPrimaryKeyName}} = ?", id).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errs.NewError(errcodes.CodeNotFound, "{{.EntityName}} not found").Occurred()
		}
		return nil, errs.NewError(errcodes.CodeDBError, "Failed to retrieve {{.EntityNameLower}}").Occurred()
	}
	
	return &{{.EntityNameLower}}, nil
}

// GetByEmail retrieves a single {{.EntityName}} by email
func (r *{{.EntityName}}Repository) GetByEmail(email string) (*models.{{.EntityName}}, error) {
	var {{.EntityNameLower}} models.{{.EntityName}}

	if err := r.DB.First(&{{.EntityNameLower}}, "email = ?", email).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errs.NewError(errcodes.CodeNotFound, "{{.EntityName}} not found").Occurred()
		}
		return nil, errs.NewError(errcodes.CodeDBError, "Failed to retrieve {{.EntityNameLower}} by email").Occurred()
	}

	return &{{.EntityNameLower}}, nil
}

// GetByPhoneNumber retrieves a single {{.EntityName}} by phone number
func (r *{{.EntityName}}Repository) GetByPhoneNumber(phoneNumber string) (*models.{{.EntityName}}, error) {
	var {{.EntityNameLower}} models.{{.EntityName}}

	if err := r.DB.First(&{{.EntityNameLower}}, "phone_number = ?", phoneNumber).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errs.NewError(errcodes.CodeNotFound, "{{.EntityName}} not found").Occurred()
		}
		return nil, errs.NewError(errcodes.CodeDBError, "Failed to retrieve {{.EntityNameLower}} by phone number").Occurred()
	}

	return &{{.EntityNameLower}}, nil
}

// Update updates an existing {{.EntityName}}
func (r *{{.EntityName}}Repository) Update(id {{.GetPrimaryKeyType}}, update *dto.{{.EntityName}}Update) (*models.{{.EntityName}}, error) {
	{{.EntityNameLower}}, err := r.GetByID(id)
	if err != nil {
		return nil, err
	}
	
  if err := r.DB.Model({{.EntityNameLower}}).Updates(update).Error; err != nil {
		return nil, errs.NewError(errcodes.CodeDBError, "Failed to update {{.EntityNameLower}}").Occurred()
	}

	// Save changes
  return {{.EntityNameLower}}, nil
}

// Delete removes a {{.EntityName}} from the database
func (r *{{.EntityName}}Repository) Delete(id {{.GetPrimaryKeyType}}) error {
	{{- if .AdditionalFeatures.SoftDelete}}
	// Soft delete
	if err := r.DB.Delete(&models.{{.EntityName}}{}, "{{.GetPrimaryKeyName}} = ?", id).Error; err != nil {
		return errs.NewError(errcodes.CodeDBError, "Failed to delete {{.EntityNameLower}}").Occurred()
	}
	{{- else}}
	// Hard delete
	if err := r.DB.Unscoped().Delete(&models.{{.EntityName}}{}, "{{.GetPrimaryKeyName}} = ?", id).Error; err != nil {
		return errs.NewError(errcodes.CodeDBError, "Failed to delete {{.EntityNameLower}}").Occurred()
	}
	{{- end}}
	
	return nil
}


// Helper functions
func To{{.EntityName}}Response(model *models.{{.EntityName}}) *dto.{{.EntityName}}Response {
	if model == nil {
		return nil
	}
	return &dto.{{.EntityName}}Response{
		{{- range .Fields}}
		{{toGoFieldName .FieldName}}: model.{{toGoFieldName .FieldName}},
		{{- end}}
		{{- range .Relations}}
    {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
		{{toGoFieldName .FieldName}}ID: model.{{toGoFieldName .FieldName}}ID,
    {{toGoFieldName .FieldName}}: To{{.RelatedEntity}}Response(model.{{toGoFieldName .FieldName}}),
		{{- end}}
		{{- end}}
	}
}
