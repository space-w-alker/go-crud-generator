//nolint:dupl // Disable dupl linter for this entire file
package repositories

import (
	"errors"
	"github.com/samber/lo"
	"{{.ModuleName}}/errs"
	"{{.ModuleName}}/errs/errcodes"
	"{{.ModuleName}}/models"
	"{{.ModuleName}}/dto"
	"gorm.io/gorm"
)

// {{.EntityName}}Repository handles database operations for {{.EntityName}}
type {{.EntityName}}Repository struct {
	DB *gorm.DB
}

// New{{.EntityName}}Repository creates a new repository
func New{{.EntityName}}Repository(db *gorm.DB) *{{.EntityName}}Repository {
	return &{{.EntityName}}Repository{DB: db}
}

// Create adds a new {{.EntityName}} to the database
func (r *{{.EntityName}}Repository) Create(create *dto.{{.EntityName}}Create) (*models.{{.EntityName}}, error) {
	{{.EntityNameLower}} := &models.{{.EntityName}}{}
	{{$parent := .}}
	// Map DTO to model
	{{- range .Fields}}
	{{$parent.EntityNameLower}}.{{toGoFieldName .FieldName}} = create.{{toGoFieldName .FieldName}}
	{{- end}}

  {{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
  if create.{{toGoFieldName .FieldName}}ID != nil {
	  {{$parent.EntityNameLower}}.{{toGoFieldName .FieldName}}ID = create.{{toGoFieldName .FieldName}}ID
  }
  {{- end}}
  {{- end}}
	
	// Save to database
	if err := r.DB.Create(&{{.EntityNameLower}}).Error; err != nil {
    return nil, errs.NewError(errcodes.CodeDBError, err.Error()).Occurred()
	}
	
	return {{.EntityNameLower}}, nil
}


func (r *{{.EntityName}}Repository) BulkCreate(creates []*dto.{{.EntityName}}Create) []any {
	results := make([]any, len(creates))

	for i, create := range creates {
		{{.EntityNameLower}}, err := r.Create(create)
		if err != nil {
			results[i] = err
		} else {
			results[i] = {{.EntityNameLower}}
		}
	}

	return results
}

// GetAll retrieves all {{.EntityNamePlural}} with optional filtering
func (r *{{.EntityName}}Repository) GetAll(q *dto.Full{{.EntityName}}Query, scopes ...func(*gorm.DB) *gorm.DB) ([]models.{{.EntityName}}, *Pagination, error) {
	var {{.EntityNameLower}}s []models.{{.EntityName}}
  scopes = append(scopes, ILikeAny(q.Q{{- range .Fields}}{{- if .Searchable}},"{{snakeCase .FieldName}}"{{- end}}{{- end}}))

	query := r.DB.Model(&models.{{.EntityName}}{})
	query.Scopes(scopes...)

	query.Where(&(q.{{.EntityName}}Query))

	if q.StartDate != nil {
		query = query.Where("created_at >= ?", q.StartDate)
	}
	if q.EndDate != nil {
		query = query.Where("created_at <= ?", q.EndDate)
	}

	for _, preload := range q.Preload {
		query.Preload(lo.PascalCase(preload))
	}

	p := NewPagination(q.Page, q.Size, q.SortBy, q.SortOrder)

	if err := p.Count(query, &models.{{.EntityName}}{}); err != nil {
    return nil, &Pagination{}, errs.NewError(errcodes.CodeDBError, err.Error()).Occurred()
	}

	if err := query.Scopes(p.Paginate()).Find(&{{.EntityNameLower}}s).Error; err != nil {
    return nil, &Pagination{}, errs.NewError(errcodes.CodeDBError, err.Error()).Occurred()
	}

	return {{.EntityNameLower}}s, p, nil
}

// GetByID retrieves a single {{.EntityName}} by ID
func (r *{{.EntityName}}Repository) GetByID(id {{.GetPrimaryKeyType}}) (*models.{{.EntityName}}, error) {
	var {{.EntityNameLower}} models.{{.EntityName}}
	
	if err := r.DB.First(&{{.EntityNameLower}}, "{{.GetPrimaryKeyName}} = ?", id).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errs.NewError(errcodes.CodeNotFound, "{{.EntityName}} not found").Occurred()
		}
		return nil, errs.NewError(errcodes.CodeDBError, err.Error()).Occurred()
	}
	
	return &{{.EntityNameLower}}, nil
}

// Update updates an existing {{.EntityName}}
func (r *{{.EntityName}}Repository) Update(id {{.GetPrimaryKeyType}}, update *dto.{{.EntityName}}Update) (*models.{{.EntityName}}, error) {
	{{.EntityNameLower}}, err := r.GetByID(id)
	if err != nil {
		return nil, err
	}
	
  if err := r.DB.Model({{.EntityNameLower}}).Updates(update).Error; err != nil {
		return nil, errs.NewError(errcodes.CodeDBError, err.Error()).Occurred()
	}

	// Save changes
  return {{.EntityNameLower}}, nil
}


func (r *{{.EntityName}}Repository) BulkUpdate(updates []*dto.{{.EntityName}}UpdateWithID) []any {
	results := make([]any, len(updates))

	for i, update := range updates {
		id := update.ID
		updateDTO := update.{{.EntityName}}Update
		{{camelCase .EntityName}}, err := r.Update(*id, &updateDTO)
		if err != nil {
			results[i] = err
		} else {
			results[i] = {{camelCase .EntityName}}
		}
	}

	return results
}

// Delete removes a {{.EntityName}} from the database
func (r *{{.EntityName}}Repository) Delete(id {{.GetPrimaryKeyType}}) error {
	{{- if .AdditionalFeatures.SoftDelete}}
	// Soft delete
	if err := r.DB.Delete(&models.{{.EntityName}}{}, "{{.GetPrimaryKeyName}} = ?", id).Error; err != nil {
		return errs.NewError(errcodes.CodeDBError, err.Error()).Occurred()
	}
	{{- else}}
	// Hard delete
	if err := r.DB.Unscoped().Delete(&models.{{.EntityName}}{}, "{{.GetPrimaryKeyName}} = ?", id).Error; err != nil {
		return errs.NewError(errcodes.CodeDBError, err.Error()).Occurred()
	}
	{{- end}}
	
	return nil
}


// Helper functions
func To{{.EntityName}}Response(model *models.{{.EntityName}}) *dto.{{.EntityName}}Response {
	if model == nil {
		return nil
	}
	return &dto.{{.EntityName}}Response{
		{{- range .Fields}}
		{{toGoFieldName .FieldName}}: model.{{toGoFieldName .FieldName}},
		{{- end}}
		{{- range .Relations}}
    {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
		{{toGoFieldName .FieldName}}ID: model.{{toGoFieldName .FieldName}}ID,
    {{toGoFieldName .FieldName}}: To{{.RelatedEntity}}Response(model.{{toGoFieldName .FieldName}}),
		{{- end}}
		{{- end}}
	}
}
