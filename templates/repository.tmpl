package repositories

// {{.EntityName}}Repository defines the interface for {{.EntityName}} database operations
type I{{.EntityName}}Repository interface {
	Create(create *dto.{{.EntityName}}Create) (*models.{{.EntityName}}, error)
	BulkCreate(creates []*dto.{{.EntityName}}Create) []any
	GetAll(q *dto.Full{{.EntityName}}Query, scopes ...func(*gorm.DB) *gorm.DB) ([]models.{{.EntityName}}, *Pagination, error)
	GetByID(id {{.GetPrimaryKeyType}}, opt ...*dto.{{.EntityName}}QueryExtraOptions) (*models.{{.EntityName}}, error)
	Update(id {{.GetPrimaryKeyType}}, update *dto.{{.EntityName}}Update) (*models.{{.EntityName}}, error)
	BulkUpdate(updates []*dto.{{.EntityName}}UpdateWithID) []any
	Delete(id {{.GetPrimaryKeyType}}) error
}

// {{.EntityName}}Repository handles database operations for {{.EntityName}}
type {{.EntityName}}Repository struct {
	*Base{{.EntityName}}Repository
}

// New{{.EntityName}}Repository creates a new repository
func New{{.EntityName}}Repository(db *gorm.DB) *{{.EntityName}}Repository {
	return &{{.EntityName}}Repository{
		Base{{.EntityName}}Repository: &Base{{.EntityName}}Repository{DB: db},
	}
}

// To{{.EntityName}}Response converts a {{.EntityName}} model to a dto.{{.EntityName}}Response
func To{{.EntityName}}Response(model *models.{{.EntityName}}) *dto.{{.EntityName}}Response {
	return To{{.EntityName}}ResponseBase(model)
}
