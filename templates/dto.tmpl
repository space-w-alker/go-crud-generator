package dto

import (
	"time"
)

// {{.EntityName}}Create DTO for creating a new {{.EntityName}}
type {{.EntityName}}Create struct {
	{{- range .Fields}}
	{{- if not .Primary}}
	{{toGoFieldName .FieldName}} {{convertTypeScriptTypeToGo .FieldType}} `json:"{{.FieldName}},omitempty" binding:"{{formatValidationRules .}}"`
	{{- end}}
	{{- end}}
	{{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
	{{toGoFieldName .FieldName}}ID {{relatedIDType .}} `json:"{{.FieldName}}ID,omitempty"`
	{{- end}}
	{{- end}}
}

// {{.EntityName}}Update DTO for updating an existing {{.EntityName}}
type {{.EntityName}}Update struct {
	{{- range .Fields}}
	{{- if not .Primary}}
	{{toGoFieldName .FieldName}} {{convertTypeScriptTypeToGo .FieldType}} `json:"{{.FieldName}},omitempty"`
	{{- end}}
	{{- end}}
	{{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
	{{toGoFieldName .FieldName}}ID {{relatedIDType .}} `json:"{{.FieldName}}ID,omitempty"`
	{{- end}}
	{{- end}}
}

// {{.EntityName}}Response DTO for responding with {{.EntityName}} data
type {{.EntityName}}Response struct {
	{{- range .Fields}}
	{{toGoFieldName .FieldName}} {{convertTypeScriptTypeToGo .FieldType}} `json:"{{.FieldName}}"`
	{{- end}}
	{{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
	{{formatRelationDTO .}}
	{{- end}}
	{{- end}}
}

type Paginated{{.EntityName}}Response struct {
	PaginationResponse
	Items []*{{.EntityName}}Response `json:"items"`
}

// {{.EntityName}}Query DTO for querying {{.EntityName}} data
type {{.EntityName}}Query struct {
  {{- range .Fields}}
	{{- if .FilterBy}}
	{{toGoFieldName .FieldName}} {{convertTypeScriptTypeToGo .FieldType}} `form:"{{.FieldName}},omitempty" json:"{{.FieldName}},omitempty"`
	{{- end}}
  {{- end}}
	{{- range .Relations}}
  {{- if or (eq .RelationType "OneToOne") (eq .RelationType "ManyToOne") }}
	{{toGoFieldName .FieldName}}ID {{relatedIDType .}} `form:"{{.FieldName}}ID,omitempty" json:"{{.FieldName}}ID,omitempty"`
	{{- end}}
	{{- end}}
}


type Full{{.EntityName}}Query struct {
  DateQuery
	PaginationQuery
  {{.EntityName}}Query
}
