package repositories

import (
	"fmt"
	"math"
	"strings"

  "{{.ModuleName}}/dto"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

const (
	DefaultPageSize = 12
	DefaultPage     = 1
)

// Pagination holds pagination data
type Pagination struct {
	SkipSort   *bool   `json:"shouldSort,omitempty"`
	Limit      *int    `json:"limit,omitempty"`
	Page       *int    `json:"page,omitempty"`
	Sort       *string `json:"sort,omitempty"`
	SortOrder  *string `json:"sort_order,omitempty"`
	TotalRows  *int    `json:"total_rows"`
	TotalPages *int    `json:"total_pages"`
}

// New creates a new Pagination instance
func NewPagination(page *int, size *int, sort *string, sortOrder *string, skipSort ...bool) *Pagination {
	skip := false
	if len(skipSort) > 0 {
		skip = skipSort[0]
	}
	return &Pagination{
		Limit:     size,
		Page:      page,
		Sort:      sort,
		SortOrder: sortOrder,
		SkipSort:  &skip,
	}
}

// Paginate is a pure pagination function that only handles pagination logic
func (p *Pagination) Paginate() func(db *gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		// Apply sorting if specified
		if p.SkipSort == nil || !*p.SkipSort {
			if p.Sort == nil {
				defaultSort := "created_at"
				p.Sort = &defaultSort
			}
			if p.SortOrder == nil {
				defaultOrder := "desc"
				p.SortOrder = &defaultOrder
			}
			isDesc := *p.SortOrder == "desc"
			db = db.Order(clause.OrderByColumn{Column: clause.Column{Name: *p.Sort}, Desc: isDesc})
		}

		// Apply pagination
		return db.Offset(p.GetOffset()).Limit(p.GetLimit())
	}
}

func FilterDate(filter dto.DateQuery, fieldName ...string) func(db *gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		f := "created_at"
		if len(fieldName) == 1 {
			f = fieldName[0]
		}
		if filter.After != nil {
			db = db.Where(fmt.Sprintf("%v >= ?", f), filter.After)
		}
		if filter.Before != nil {
			db = db.Where(fmt.Sprintf("%v <= ?", f), filter.Before)
		}
		return db
	}
}

func PreloadRelations(p []string) func(db *gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		for _, preload := range p {
			parts := strings.Split(preload, ";")

			if len(parts) > 1 {
				relationship := parts[0]
				condition := parts[1]
				args := parts[2:]

				conditionArgs := make([]interface{}, len(args))
				for i, arg := range args {
					conditionArgs[i] = arg
				}

				db = db.Preload(relationship, func(db *gorm.DB) *gorm.DB {
					return db.Where(condition, conditionArgs...)
				})
			} else {
				db = db.Preload(preload)
			}
		}
		return db
	}
}

// Count sets the total rows and pages count
func (p *Pagination) Count(db *gorm.DB, model interface{}, primaryKey ...string) error {
	var totalRows int64
	pKey := "id"
	if primaryKey != nil {
		pKey = primaryKey[0]
	}
	if err := db.Distinct(pKey).Model(model).Count(&totalRows).Error; err != nil {
		return err
	}

	totalInt := int(totalRows)
	totalPages := int(math.Ceil(float64(totalRows) / float64(p.GetLimit())))
	p.TotalRows = &totalInt
	p.TotalPages = &totalPages
	return nil
}

// GetOffset calculates and returns the offset for pagination
func (p *Pagination) GetOffset() int {
	return (p.GetPage() - 1) * p.GetLimit()
}

// GetLimit returns the limit
func (p *Pagination) GetLimit() int {
	if p.Limit == nil {
		d := DefaultPageSize
		p.Limit = &d // default limit
	}
	return *p.Limit
}

// GetPage returns the current page
func (p *Pagination) GetPage() int {
	if p.Page == nil {
		d := DefaultPage
		p.Page = &d // default page
	}
	return *p.Page
}

// ILikeAny creates a WHERE condition that performs a case-insensitive LIKE search
// across multiple columns. Returns records where ANY of the columns match the value.
func ILikeAny(value *string, columns ...string) func(db *gorm.DB) *gorm.DB {
	return func(db *gorm.DB) *gorm.DB {
		if len(columns) == 0 || value == nil || *value == "" {
			return db
		}

		searchValue := "%" + *value + "%"
		conditions := make([]string, len(columns))
		args := make([]interface{}, len(columns))

		for i, column := range columns {
			conditions[i] = fmt.Sprintf("LOWER(%s) LIKE LOWER(?)", column)
			args[i] = searchValue
		}

		return db.Where(strings.Join(conditions, " OR "), args...)
	}
}
