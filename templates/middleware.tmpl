package middleware

import (
	"errors"
	"strings"

	"github.com/gin-gonic/gin"
  "{{.ModuleName}}/errs"
	"{{.ModuleName}}/errs/errcodes"
	"{{.ModuleName}}/repositories"
)

// AuthMiddleware validates JWT token and sets the user in context
func AuthMiddleware(authService *repositories.AuthService) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		// Get the Authorization header
		authHeader := ctx.GetHeader("Authorization")
		if authHeader == "" {
			serverErr := errs.NewError(errcodes.CodeMissingCredentials, "authorization header is required")
			ctx.AbortWithStatusJSON(errs.GetStatusCode(serverErr), serverErr)
			return
		}

		// Check if the header has the correct format
		parts := strings.Split(authHeader, " ")
		if len(parts) != 2 || parts[0] != "Bearer" {
			serverErr := errs.NewError(errcodes.CodeInvalidToken, "authorization header format must be Bearer {token}")
			ctx.AbortWithStatusJSON(errs.GetStatusCode(serverErr), serverErr)
			return
		}

		// Extract the token
		tokenString := parts[1]

		// Validate the token
		user, err := authService.ValidateAccessToken(tokenString)
		if err != nil {
			// Check if error is already a ServerError
			var serverErr *errs.ServerError
			if !errors.As(err, &serverErr) {
				// If not, create a new ServerError
				serverErr = errs.NewError(errcodes.CodeInvalidToken, err.Error())
			}
			ctx.AbortWithStatusJSON(errs.GetStatusCode(serverErr), serverErr)
			return
		}

		authService.DB.First(user)

		// Check if user is active
		if !*user.IsActive {
			serverErr := errs.NewError(errcodes.CodeAccountDeactivated, "account is deactivated")
			ctx.AbortWithStatusJSON(errs.GetStatusCode(serverErr), serverErr)
			return
		}

		// Set user in context
		ctx.Set("user", user)

		ctx.Next()
	}
}
