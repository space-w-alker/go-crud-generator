package repositories

import (
	"encoding/json"
	"errors"
	"os"
	"time"

	"github.com/golang-jwt/jwt/v5"
  "{{.ModuleName}}/dto"
	e "{{.ModuleName}}/errs"
	ec "{{.ModuleName}}/errs/errcodes"
	"{{.ModuleName}}/models"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

// Error constants
var (
	ErrEmailAlreadyExists       = e.NewError(ec.CodeEmailExists, "user with this email already exists")
	ErrPhoneNumberAlreadyExists = e.NewError(ec.CodePhoneExists, "user with this phone number already exists")
	ErrInvalidCredentials       = e.NewError(ec.CodeInvalidCredentials, "invalid email or password")
	ErrMissingCredentials       = e.NewError(ec.CodeMissingCredentials, "either email or phone number must be provided")
	ErrAccountDeactivated       = e.NewError(ec.CodeAccountDeactivated, "account is deactivated")
	ErrInvalidToken             = e.NewError(ec.CodeInvalidToken, "invalid token")
	ErrTokenExpired             = e.NewError(ec.CodeExpiredToken, "access token expired")
	ErrFailedToExtractClaims    = e.NewError(ec.CodeExtractClaimsFailed, "failed to extract claims")
	ErrUserDataNotFoundInToken  = e.NewError(ec.CodeNoUserData, "user data not found in token")
	ErrUnexpectedSigningMethod  = e.NewError(ec.CodeUnexpectedSigning, "unexpected signing method")
	ErrUserNotFound             = e.NewError(ec.CodeNotFound, "user not found")
)

// Time constants
const (
	accessTokenExpirationMinutes = 15
	refreshTokenExpirationDays   = 7
)

type AuthService struct {
	DB *gorm.DB
}

func NewAuthService(db *gorm.DB) *AuthService {
	return &AuthService{DB: db}
}

func (s *AuthService) SignUp(input dto.SignUpInput) (*dto.AuthResponse, error) {
	// Check if at least one of email or phone number is provided
	if input.Email == nil && input.PhoneNumber == nil {
		return nil, ErrMissingCredentials.Occurred()
	}
	// Check if user already exists with the given email if provided
	var count int64
	if input.Email != nil {
		if err := s.DB.Model(&models.User{}).Where("email = ?", input.Email).Count(&count).Error; err != nil {
			return nil, e.NewError(ec.CodeDBError, "failed to check existing users: "+err.Error())
		}
		if count > 0 {
			return nil, ErrEmailAlreadyExists.Occurred()
		}
	}

	// Check if phone number already exists if provided
	if input.PhoneNumber != nil {
		if err := s.DB.Model(&models.User{}).Where("phone_number = ?", input.PhoneNumber).Count(&count).Error; err != nil {
			return nil, e.NewError(ec.CodeDBError, "failed to check existing users: "+err.Error())
		}
		if count > 0 {
			return nil, ErrPhoneNumberAlreadyExists.Occurred()
		}
	}

	// Hash the password
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(*input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, e.NewError(ec.CodePasswordHashFailed, "failed to hash password: "+err.Error())
	}

	// Create user
	now := time.Now()
	isVerified := false
	isActive := true
	verificationStatus := "pending"
	passwordHash := string(hashedPassword)
	user := models.User{
		Email:              input.Email,
		PhoneNumber:        input.PhoneNumber,
		PasswordHash:       &passwordHash,
		FullName:           input.FullName,
		UserType:           input.UserType,
		Address:            input.Address,
		State:              input.State,
		City:               input.City,
		IsVerified:         &isVerified,
		VerificationStatus: &verificationStatus,
		IsActive:           &isActive,
	}

	// Save user to database
	if err := s.DB.Create(&user).Error; err != nil {
		return nil, e.NewError(ec.CodeUserCreationFailed, "failed to create user: "+err.Error())
	}

	// Generate tokens
	accessToken, err := s.GenerateAccessToken(user)
	if err != nil {
		return nil, err
	}

	refreshToken, err := s.GenerateRefreshToken(*user.ID)
	if err != nil {
		return nil, err
	}

	// Create auth response
	response := &dto.AuthResponse{
		AccessToken:  &accessToken,
		RefreshToken: &refreshToken,
	}

	return response, nil
}

func (s *AuthService) SignIn(input dto.SignInInput) (*dto.AuthResponse, error) {
	// Check if at least one of email or phone number is provided
	if input.Email == nil && input.PhoneNumber == nil {
		return nil, ErrMissingCredentials
	}

	// Find user by email or phone number
	var user models.User
	query := s.DB.Where("1 = 0") // Start with a query that returns nothing

	if input.Email != nil {
		query = query.Or("email = ?", input.Email)
	}

	if input.PhoneNumber != nil {
		query = query.Or("phone_number = ?", input.PhoneNumber)
	}

	if err := query.First(&user).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, ErrInvalidCredentials.Occurred()
		}
		return nil, e.NewError(ec.CodeDBError, "failed to get user: "+err.Error())
	}

	// Check if user is active
	if !*user.IsActive {
		return nil, ErrAccountDeactivated.Occurred()
	}

	// Verify password
	err := bcrypt.CompareHashAndPassword([]byte(*user.PasswordHash), []byte(*input.Password))
	if err != nil {
		return nil, ErrInvalidCredentials
	}

	// Generate tokens
	accessToken, err := s.GenerateAccessToken(user)
	if err != nil {
		return nil, err
	}

	refreshToken, err := s.GenerateRefreshToken(*user.ID)
	if err != nil {
		return nil, err
	}

	// Create auth response
	response := &dto.AuthResponse{
		AccessToken:  &accessToken,
		RefreshToken: &refreshToken,
	}

	return response, nil
}

// RefreshToken validates a refresh token and issues a new access token
func (s *AuthService) RefreshToken(input dto.RefreshTokenInput) (*dto.AuthResponse, error) {
	// Parse the refresh token
	token, err := jwt.Parse(*input.RefreshToken, func(token *jwt.Token) (interface{}, error) {
		// Validate the signing method
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, ErrUnexpectedSigningMethod.Occurred()
		}

		// Get the JWT refresh secret key from environment variable
		jwtRefreshSecret := os.Getenv("JWT_REFRESH_SECRET")
		return []byte(jwtRefreshSecret), nil
	})
	if err != nil {
		return nil, e.NewError(ec.CodeTokenParseFailed, "failed to parse refresh token: "+err.Error())
	}

	if !token.Valid {
		return nil, ErrInvalidToken.Occurred()
	}

	// Extract claims
	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return nil, ErrFailedToExtractClaims.Occurred()
	}

	// Verify this is a refresh token
	tokenType, ok := claims["type"].(string)
	if !ok || tokenType != "refresh" {
		return nil, ErrInvalidToken
	}

	// Extract user ID from claims
	userID, ok := claims["user_id"].(string)
	if !ok {
		return nil, ErrUserDataNotFoundInToken.Occurred()
	}

	// Fetch the user from the database
	var user models.User
	if err := s.DB.Where("id = ?", userID).First(&user).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, ErrUserNotFound
		}
		return nil, e.NewError(ec.CodeDBError, "failed to get user: "+err.Error())
	}

	// Check if user is active
	if !*user.IsActive {
		return nil, ErrAccountDeactivated
	}

	// Generate a new access token
	accessToken, err := s.GenerateAccessToken(user)
	if err != nil {
		return nil, err
	}

	// Generate a new refresh token
	refreshToken, err := s.GenerateRefreshToken(*user.ID)
	if err != nil {
		return nil, err
	}

	// Create auth response with both tokens
	response := &dto.AuthResponse{
		AccessToken:  &accessToken,
		RefreshToken: &refreshToken,
	}

	return response, nil
}

func (s *AuthService) GenerateAccessToken(user models.User) (string, error) {
	// Set expiration time for the token
	expirationTime := time.Now().Add(accessTokenExpirationMinutes * time.Minute) // 15 minutes

	// Convert user to map to include in claims
	userJSON, err := json.Marshal(user)
	if err != nil {
		return "", e.NewError(ec.CodeJSONMarshalFailed, "failed to marshal user data: "+err.Error())
	}

	var userMap map[string]interface{}
	if err := json.Unmarshal(userJSON, &userMap); err != nil {
		return "", e.NewError(ec.CodeJSONUnmarshalFailed, "failed to unmarshal user data: "+err.Error())
	}

	// Create claims with full user data and expiration time
	claims := jwt.MapClaims{
		"user":    userMap,
		"user_id": user.ID, // Keep user_id for backward compatibility
		"exp":     expirationTime.Unix(),
		"iat":     time.Now().Unix(),
	}

	// Create token with claims
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// Get the JWT secret key from environment variable
	jwtSecret := os.Getenv("JWT_SECRET")

	// Generate the token string
	tokenString, err := token.SignedString([]byte(jwtSecret))
	if err != nil {
		return "", e.NewError(ec.CodeTokenSigningFailed, "failed to sign token: "+err.Error())
	}

	return tokenString, nil
}

func (s *AuthService) GenerateRefreshToken(userID string) (string, error) {
	// Set expiration time for the refresh token
	expirationTime := time.Now().Add(refreshTokenExpirationDays * 24 * time.Hour) // 7 days

	// Create claims with user ID and expiration time
	claims := jwt.MapClaims{
		"user_id": userID,
		"exp":     expirationTime.Unix(),
		"iat":     time.Now().Unix(),
		"type":    "refresh",
	}

	// Create token with claims
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// Get the JWT refresh secret key from environment variable
	jwtRefreshSecret := os.Getenv("JWT_REFRESH_SECRET")

	// Generate the token string
	tokenString, err := token.SignedString([]byte(jwtRefreshSecret))
	if err != nil {
		return "", e.NewError(ec.CodeRefreshTokenSigningFailed, "failed to sign refresh token: "+err.Error())
	}

	return tokenString, nil
}

func (s *AuthService) ValidateAccessToken(tokenString string) (*models.User, error) {
	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		// Validate the signing method
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, ErrUnexpectedSigningMethod
		}

		// Get the JWT secret key from environment variable
		jwtSecret := os.Getenv("JWT_SECRET")

		return []byte(jwtSecret), nil
	})
	// Check specifically for token expiration error
	if err != nil {
		if errors.Is(err, jwt.ErrTokenExpired) {
			return nil, ErrTokenExpired // Use a new dedicated error for expiration
		}
		return nil, e.NewError(ec.CodeTokenParseFailed, "failed to parse token: "+err.Error())
	}

	if !token.Valid {
		return nil, ErrInvalidToken
	}

	// Extract claims
	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return nil, ErrFailedToExtractClaims
	}

	// Extract user data from claims
	userData, ok := claims["user"].(map[string]interface{})
	if !ok {
		// Fallback to old token format where only user_id was stored
		userID, ok := claims["user_id"].(string)
		if !ok {
			return nil, ErrUserDataNotFoundInToken
		}

		// Fetch user from database using ID
		var user models.User
		if err := s.DB.Where("id = ?", userID).First(&user).Error; err != nil {
			return nil, e.NewError(ec.CodeDBError, "failed to get user from ID in token: "+err.Error())
		}
		return &user, nil
	}

	// Convert map back to user object
	userJSON, err := json.Marshal(userData)
	if err != nil {
		return nil, e.NewError(ec.CodeJSONMarshalFailed, "failed to marshal user data from token: "+err.Error())
	}

	var user models.User
	if err := json.Unmarshal(userJSON, &user); err != nil {
		return nil, e.NewError(ec.CodeJSONUnmarshalFailed, "failed to unmarshal user data from token: "+err.Error())
	}

	return &user, nil
}
