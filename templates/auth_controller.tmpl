package controllers

import (
	"net/http"

	"github.com/gin-gonic/gin"
  "{{.ModuleName}}/dto"
	"{{.ModuleName}}/errs"
	"{{.ModuleName}}/errs/errcodes"
	"{{.ModuleName}}/repositories"
)

type AuthController struct {
	authService *repositories.AuthService
}

func NewAuthController(authService *repositories.AuthService) *AuthController {
	return &AuthController{
		authService: authService,
	}
}

// SignUp handles user registration
// @Summary Register a new user
// @Description Register a new user with the provided information
// @ID signUp
// @Accept json
// @Produce json
// @Param input body dto.SignUpInput true "User Registration Information"
// @Success 201 {object} dto.AuthResponse
// @Failure 400 {object} errs.ServerError
// @Router /auth/signup [post]
func (c *AuthController) SignUp(ctx *gin.Context) {
	var input dto.SignUpInput

	// Bind and validate input
	if err := ctx.ShouldBindJSON(&input); err != nil {
		serverErr := errs.NewError(errcodes.CodeInvalidRequest, err.Error())
		ctx.JSON(http.StatusBadRequest, serverErr)
		return
	}

	// Call service to create user
	response, err := c.authService.SignUp(input)
	if err != nil {
		ctx.JSON(errs.GetStatusCode(err), err)
		return
	}

	ctx.JSON(http.StatusCreated, response)
}

// SignIn handles user authentication
// @Summary Authenticate user
// @Description Authenticate a user with credentials and return a token
// @ID signIn
// @Accept json
// @Produce json
// @Param input body dto.SignInInput true "User Credentials"
// @Success 200 {object} dto.AuthResponse
// @Failure 400 {object} errs.ServerError
// @Failure 401 {object} errs.ServerError
// @Router /auth/signin [post]
func (c *AuthController) SignIn(ctx *gin.Context) {
	var input dto.SignInInput

	// Bind and validate input
	if err := ctx.ShouldBindJSON(&input); err != nil {
		serverErr := errs.NewError(errcodes.CodeInvalidRequest, err.Error())
		ctx.JSON(http.StatusBadRequest, serverErr)
		return
	}

	// Call service to authenticate user
	response, err := c.authService.SignIn(input)
	if err != nil {
		ctx.JSON(errs.GetStatusCode(err), err)
		return
	}

	ctx.JSON(http.StatusOK, response)
}

// RefreshToken godoc
// @Summary Refresh access token
// @Description Use a valid refresh token to obtain a new access token
// @ID refreshToken
// @Tags authentication
// @Accept json
// @Produce json
// @Param request body dto.RefreshTokenInput true "Refresh token data"
// @Success 200 {object} dto.AuthResponse "Successful token refresh"
// @Failure 400 {object} errs.ServerError "Invalid input"
// @Failure 401 {object} errs.ServerError "Invalid refresh token"
// @Failure 403 {object} errs.ServerError "Account deactivated"
// @Failure 500 {object} errs.ServerError "Server error"
// @Router /auth/refresh-token [post]
func (c *AuthController) RefreshToken(ctx *gin.Context) {
	var request dto.RefreshTokenInput
	if err := ctx.ShouldBindJSON(&request); err != nil {
		serverErr := errs.NewError(errcodes.CodeInvalidRequest, "Invalid request format")
		ctx.JSON(http.StatusBadRequest, serverErr)
		return
	}

	// Convert request to service input
	input := dto.RefreshTokenInput{
		RefreshToken: request.RefreshToken,
	}

	// Call the service function
	response, err := c.authService.RefreshToken(input)
	if err != nil {
		ctx.JSON(errs.GetStatusCode(err), err)
		return
	}

	// Return the new tokens
	ctx.JSON(http.StatusOK, response)
}

// RegisterRoutes registers all auth routes
func (c *AuthController) RegisterRoutes(router *gin.RouterGroup) {
	authGroup := router.Group("/auth")
	{
		authGroup.POST("/signup", c.SignUp)
		authGroup.POST("/signin", c.SignIn)
		authGroup.POST("/refresh-token", c.RefreshToken)
	}
}
